---
import { getCollection, type CollectionEntry } from "astro:content";
import ContentLayout from "../../layouts/ContentLayout.astro";
import CodeExample from "../../components/CodeExample.astro";
import AnnotatedCode from "../../components/AnnotatedCode.astro";
import ResourceLinks from "../../components/ResourceLinks.astro";

// Import components that will be used in MDX files
export const components = { CodeExample, AnnotatedCode, ResourceLinks };

export async function getStaticPaths() {
  const dddEntries = await getCollection("ddd");
  return dddEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

type Props = {
  entry: CollectionEntry<"ddd">;
};

const { entry } = Astro.props;
const { Content } = await entry.render();

// Generate breadcrumbs based on section and category
const breadcrumbs: Array<{ label: string; url?: string }> = [
  { label: "Главная", url: "/" },
  { label: "Domain-Driven Design", url: "/ddd/" },
];

// Add category to breadcrumbs if exists
if (entry.data.category) {
  const categoryLabels = {
    basic: "Основы",
    strategic: "Стратегические паттерны",
    tactical: "Тактические паттерны",
  };

  const categoryLabel =
    categoryLabels[entry.data.category] || entry.data.category;

  // No direct URLs for categories yet, so we don't add a URL
  breadcrumbs.push({
    label: categoryLabel,
  });
}

// Add current page to breadcrumbs
breadcrumbs.push({
  label: entry.data.title,
});
---

<ContentLayout
  title={`${entry.data.title} | Архитектурный Гуру`}
  section="ddd"
  currentSlug={entry.slug}
>
  <div class="breadcrumbs">
    {
      breadcrumbs.map((crumb, index) => (
        <>
          {index > 0 && <span class="breadcrumb-separator">/</span>}
          {crumb.url ? (
            <a href={crumb.url}>{crumb.label}</a>
          ) : (
            <span class="current-page">{crumb.label}</span>
          )}
        </>
      ))
    }
  </div>

  <header class="pattern-header">
    <h1>{entry.data.title}</h1>
    <p class="pattern-description">{entry.data.description}</p>
  </header>

  {
    entry.data.cover && (
      <div class="cover-image">
        <img src={entry.data.cover} alt={entry.data.title} />
      </div>
    )
  }

  <article class="pattern-article">
    <Content components={components} />
  </article>

  <footer class="pattern-footer">
    {
      entry.data.lastUpdated && (
        <div class="last-updated">
          Последнее обновление: {entry.data.lastUpdated}
        </div>
      )
    }
  </footer>
</ContentLayout>

<style>
  .breadcrumbs {
    margin-bottom: 1.5rem;
    color: #666;
    font-size: 0.9rem;
  }

  .breadcrumb-separator {
    margin: 0 0.5rem;
    color: #ccc;
  }

  .breadcrumbs a {
    color: #666;
    text-decoration: none;
  }

  .breadcrumbs a:hover {
    color: #4a6cf7;
    text-decoration: underline;
  }

  .current-page {
    color: #999;
  }

  .pattern-header {
    margin-bottom: 2rem;
  }

  h1 {
    font-size: 2.5rem;
    line-height: 1.2;
    margin: 0 0 1rem 0;
    color: #333;
  }

  .pattern-description {
    font-size: 1.2rem;
    color: #555;
    line-height: 1.5;
    margin-bottom: 1.5rem;
  }

  .cover-image {
    margin-bottom: 2rem;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .cover-image img {
    width: 100%;
    height: auto;
    display: block;
  }

  .pattern-article {
    font-size: 1.1rem;
    line-height: 1.7;
    color: #333;
  }

  .pattern-footer {
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid #eee;
  }

  .last-updated {
    font-size: 0.9rem;
    color: #666;
    font-style: italic;
    margin-bottom: 2rem;
  }

  @media (prefers-color-scheme: dark) {
    h1 {
      color: #e0e0e0;
    }

    .pattern-description {
      color: #ccc;
    }

    .pattern-article {
      color: #e0e0e0;
    }
  }
</style>
