---
import { getCollection, CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import CodeExample from "../../components/CodeExample.astro";
import AnnotatedCode from "../../components/AnnotatedCode.astro";
import ResourceLinks from "../../components/ResourceLinks.astro";

// Import components that will be used in MDX files
export const components = { CodeExample, AnnotatedCode, ResourceLinks };

export async function getStaticPaths() {
  const dddEntries = await getCollection("ddd");
  return dddEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

type Props = {
  entry: CollectionEntry<"ddd">;
};

const { entry } = Astro.props;
const { Content } = await entry.render();

// Generate breadcrumbs based on section and category
const breadcrumbs = [
  { label: "Главная", url: "/" },
  { label: "Domain-Driven Design", url: "/ddd/" },
];

// Add category to breadcrumbs if exists
if (entry.data.category) {
  const categoryLabels = {
    basic: "Основы",
    strategic: "Стратегические паттерны",
    tactical: "Тактические паттерны",
  };

  const categoryLabel =
    categoryLabels[entry.data.category] || entry.data.category;

  // No direct URLs for categories yet, so we don't add a URL
  breadcrumbs.push({
    label: categoryLabel,
    url: null,
  });
}

// Add current page to breadcrumbs
breadcrumbs.push({
  label: entry.data.title,
  url: null,
});

// Get related content for sidebar
const hasRelated = entry.data.related && entry.data.related.length > 0;
---

<Layout title={`${entry.data.title} | Архитектурный Гуру`}>
  <div class="pattern-container">
    <main class="pattern-content">
      <div class="breadcrumbs">
        {
          breadcrumbs.map((crumb, index) => (
            <>
              {index > 0 && <span class="breadcrumb-separator">/</span>}
              {crumb.url ? (
                <a href={crumb.url}>{crumb.label}</a>
              ) : (
                <span class="current-page">{crumb.label}</span>
              )}
            </>
          ))
        }
      </div>

      <header class="pattern-header">
        <h1>{entry.data.title}</h1>
        <p class="pattern-description">{entry.data.description}</p>
      </header>

      {
        entry.data.cover && (
          <div class="cover-image">
            <img src={entry.data.cover} alt={entry.data.title} />
          </div>
        )
      }

      <article class="pattern-article">
        <Content components={components} />
      </article>

      <footer class="pattern-footer">
        {
          entry.data.lastUpdated && (
            <div class="last-updated">
              Последнее обновление: {entry.data.lastUpdated}
            </div>
          )
        }
      </footer>
    </main>

    {
      hasRelated && (
        <aside class="pattern-sidebar">
          <div class="related-container">
            <div class="related-section">
              <h3>Связанные концепции</h3>
              <ul class="related-list">
                {entry.data.related.map((item) => (
                  <li>
                    <a
                      href={`/${item.includes("-") ? "smells" : "ddd"}/${item}`}
                    >
                      {item}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </aside>
      )
    }
  </div>
</Layout>

<style>
  .pattern-container {
    display: grid;
    grid-template-columns: 1fr 280px;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .pattern-content {
    min-width: 0;
  }

  .breadcrumbs {
    margin-bottom: 1.5rem;
    color: #666;
    font-size: 0.9rem;
  }

  .breadcrumb-separator {
    margin: 0 0.5rem;
    color: #ccc;
  }

  .breadcrumbs a {
    color: #666;
    text-decoration: none;
  }

  .breadcrumbs a:hover {
    color: #4a6cf7;
    text-decoration: underline;
  }

  .current-page {
    color: #999;
  }

  .pattern-header {
    margin-bottom: 2rem;
  }

  h1 {
    font-size: 2.5rem;
    line-height: 1.2;
    margin: 0 0 1rem 0;
    color: #333;
  }

  .pattern-description {
    font-size: 1.2rem;
    color: #555;
    line-height: 1.5;
    margin-bottom: 1.5rem;
  }

  .cover-image {
    margin-bottom: 2rem;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .cover-image img {
    width: 100%;
    height: auto;
    display: block;
  }

  .pattern-article {
    font-size: 1.1rem;
    line-height: 1.7;
    color: #333;
  }

  .pattern-footer {
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid #eee;
  }

  .last-updated {
    font-size: 0.9rem;
    color: #666;
    font-style: italic;
    margin-bottom: 2rem;
  }

  .pattern-sidebar {
    position: sticky;
    top: 100px;
    align-self: start;
  }

  .related-container {
    background-color: white;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
  }

  .related-section h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.2rem;
    color: #333;
  }

  .related-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .related-list li {
    margin-bottom: 0.5rem;
  }

  .related-list a {
    display: block;
    padding: 0.5rem;
    border-radius: 4px;
    text-decoration: none;
    color: #4a6cf7;
    transition: background-color 0.2s;
  }

  .related-list a:hover {
    background-color: #f0f4f8;
  }

  @media (prefers-color-scheme: dark) {
    h1 {
      color: #e0e0e0;
    }

    .pattern-description {
      color: #ccc;
    }

    .pattern-article {
      color: #e0e0e0;
    }

    .related-container {
      background-color: #1e1e2e;
    }

    .related-section h3 {
      color: #e0e0e0;
    }

    .related-list a:hover {
      background-color: #252836;
    }
  }

  @media (max-width: 900px) {
    .pattern-container {
      grid-template-columns: 1fr;
    }

    .pattern-sidebar {
      position: static;
      margin-top: 2rem;
    }
  }
</style>
