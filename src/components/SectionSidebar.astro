---
import { getCollection } from "astro:content";

interface Props {
  currentSlug?: string;
  section: "ddd" | "smells";
}

const { currentSlug, section } = Astro.props;

// Get all entries for the current section
const entries = await getCollection(section);

// Filter only published entries and sort them
const publishedEntries = entries
  .filter((entry) => entry.data.published !== false)
  .sort((a, b) => {
    // Sort by category first, then by title
    const categoryOrder = {
      basic: 0,
      strategic: 1,
      tactical: 2,
      "data-centric": 0,
      complexity: 1,
    };

    const aOrder = a.data.category
      ? (categoryOrder[a.data.category] ?? 999)
      : 999;
    const bOrder = b.data.category
      ? (categoryOrder[b.data.category] ?? 999)
      : 999;

    if (aOrder !== bOrder) {
      return aOrder - bOrder;
    }

    return a.data.title.localeCompare(b.data.title);
  });

// Group entries by category
const groupedEntries = publishedEntries.reduce(
  (acc, entry) => {
    const category = entry.data.category || "uncategorized";
    if (!acc[category]) {
      acc[category] = [];
    }
    acc[category].push(entry);
    return acc;
  },
  {} as Record<string, typeof publishedEntries>,
);

// Define category labels
const categoryLabels: Record<string, { title: string; icon: string }> = {
  // DDD categories
  basic: { title: "–û—Å–Ω–æ–≤—ã", icon: "üìö" },
  strategic: { title: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã", icon: "üåê" },
  tactical: { title: "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã", icon: "‚öôÔ∏è" },

  // Smells categories
  "data-centric": { title: "–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏", icon: "üìä" },
  complexity: { title: "–ü—Ä–æ–±–ª–µ–º—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", icon: "üåÄ" },

  // Fallback
  uncategorized: { title: "–î—Ä—É–≥–∏–µ", icon: "üìù" },
};

const basePath = `/${section}`;
---

<aside class="section-sidebar">
  <div class="sidebar-header">
    <h3>
      {section === "ddd" ? "Domain-Driven Design" : "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∑–∞–ø–∞—Ö–∏"}
    </h3>
    <a href={basePath} class="back-to-index"> ‚Üê –û–±–∑–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ </a>
  </div>

  <nav class="sidebar-nav">
    {
      Object.entries(groupedEntries).map(([category, entries]) => {
        const categoryInfo =
          categoryLabels[category] || categoryLabels.uncategorized;

        return (
          <div class="nav-category">
            <div class="category-header">
              <span class="category-icon">{categoryInfo.icon}</span>
              <span class="category-title">{categoryInfo.title}</span>
              <span class="category-count">({entries.length})</span>
            </div>

            <ul class="category-items">
              {entries.map((entry) => (
                <li class="nav-item">
                  <a
                    href={`${basePath}/${entry.slug}`}
                    class={`nav-link ${currentSlug === entry.slug ? "active" : ""}`}
                  >
                    {entry.data.title}
                    {entry.data.severity && (
                      <span class={`severity-indicator ${entry.data.severity}`}>
                        {entry.data.severity === "high"
                          ? "!"
                          : entry.data.severity === "medium"
                            ? "‚Ä¢"
                            : "¬∑"}
                      </span>
                    )}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        );
      })
    }
  </nav>

  <!-- Quick navigation for current article -->
  {
    currentSlug && (
      <div class="quick-nav">
        <h4>–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</h4>
        <div class="quick-nav-placeholder">
          <small>–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞</small>
        </div>
      </div>
    )
  }
</aside>

<style>
  .section-sidebar {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
    position: sticky;
    top: 100px;
    height: fit-content;
    max-height: calc(100vh - 120px);
    overflow-y: auto;
  }

  .sidebar-header {
    padding: 1.5rem;
    border-bottom: 1px solid #f1f5f9;
  }

  .sidebar-header h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
    color: #333;
    font-weight: 600;
  }

  .back-to-index {
    display: inline-flex;
    align-items: center;
    color: #4a6cf7;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    cursor: pointer;
  }

  .back-to-index:hover {
    color: #1e40af;
    background-color: #f1f5f9;
  }

  .sidebar-nav {
    padding: 0 0 1rem 0;
  }

  .nav-category {
    margin-bottom: 1.5rem;
  }

  .category-header {
    display: flex;
    align-items: center;
    padding: 0.75rem 1.5rem 0.5rem;
    font-size: 0.9rem;
    font-weight: 600;
    color: #374151;
    border-bottom: 1px solid #f8fafc;
  }

  .category-icon {
    margin-right: 0.5rem;
    font-size: 1rem;
  }

  .category-title {
    flex: 1;
  }

  .category-count {
    color: #9ca3af;
    font-weight: 400;
    font-size: 0.8rem;
  }

  .category-items {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .nav-item {
    margin: 0;
  }

  .nav-link {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1.5rem;
    color: #374151;
    text-decoration: none;
    font-size: 0.9rem;
    border-left: 3px solid transparent;
    transition: all 0.2s ease;
    line-height: 1.4;
    cursor: pointer;
    font-weight: 500;
  }

  .nav-link:hover {
    background-color: #f1f5f9;
    color: #1e40af;
    border-left-color: #3b82f6;
    transform: translateX(2px);
  }

  .nav-link.active {
    background-color: #dbeafe;
    color: #1e40af;
    border-left-color: #2563eb;
    font-weight: 600;
  }

  .severity-indicator {
    font-weight: bold;
    font-size: 0.8rem;
    padding: 0.125rem 0.25rem;
    border-radius: 3px;
    margin-left: 0.5rem;
  }

  .severity-indicator.high {
    background-color: #fee2e2;
    color: #dc2626;
  }

  .severity-indicator.medium {
    background-color: #fef3c7;
    color: #d97706;
  }

  .severity-indicator.low {
    background-color: #d1fae5;
    color: #059669;
  }

  .quick-nav {
    border-top: 1px solid #f1f5f9;
    padding: 1rem 1.5rem;
  }

  .quick-nav h4 {
    margin: 0 0 0.5rem 0;
    font-size: 0.9rem;
    color: #374151;
    font-weight: 600;
  }

  .quick-nav-placeholder {
    color: #9ca3af;
    font-style: italic;
  }

  @media (prefers-color-scheme: dark) {
    .section-sidebar {
      background-color: #1e1e2e;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.3);
    }

    .sidebar-header {
      border-bottom-color: #3e3e5e;
    }

    .sidebar-header h3 {
      color: #e0e0e0;
    }

    .back-to-index {
      color: #60a5fa;
    }

    .back-to-index:hover {
      color: #93c5fd;
      background-color: #374151;
    }

    .category-header {
      color: #d1d5db;
      border-bottom-color: #374151;
    }

    .category-count {
      color: #6b7280;
    }

    .nav-link {
      color: #d1d5db;
    }

    .nav-link:hover {
      background-color: #374151;
      color: #60a5fa;
      border-left-color: #3b82f6;
    }

    .nav-link.active {
      background-color: #1f2937;
      color: #60a5fa;
      border-left-color: #2563eb;
    }

    .severity-indicator.high {
      background-color: #450a0a;
      color: #fca5a5;
    }

    .severity-indicator.medium {
      background-color: #451a03;
      color: #fed7aa;
    }

    .severity-indicator.low {
      background-color: #064e3b;
      color: #a7f3d0;
    }

    .quick-nav {
      border-top-color: #3e3e5e;
    }

    .quick-nav h4 {
      color: #d1d5db;
    }

    .quick-nav-placeholder {
      color: #6b7280;
    }
  }

  @media (max-width: 900px) {
    .section-sidebar {
      position: static;
      margin-top: 2rem;
      max-height: none;
    }
  }
</style>
